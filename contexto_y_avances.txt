==========================================================
CONTEXTO DEL PROYECTO: Pacífico Web
==========================================================

*   **Objetivo Principal:** Desarrollar un sistema SaaS con gestión de usuarios, planes de suscripción y un panel de administración.
*   **Tecnologías Clave:** Node.js (Express), Supabase (Postgres), bcryptjs, jsonwebtoken, HTML/CSS/JavaScript (frontend).
*   **Flujo de Usuario:**
    *   Administrador crea usuario temporal (email, contraseña temporal, plan).
    *   Usuario recibe credenciales temporales, inicia sesión y debe actualizar a una contraseña permanente.
    *   Contraseñas temporales expiran si no se usan.
    *   Login normal con credenciales permanentes.
*   **Panel de Administración:** Gestión de usuarios, planes, estados (temporal, activo, suspendido), y acciones administrativas.
*   **Entorno:** Ejecución en Termux.

==========================================================
AVANCES REALIZADOS
==========================================================

1.  **Diseño y Configuración de Base de Datos (Supabase/Postgres):**
    *   Implementación de un esquema de base de datos robusto y normalizado (`public.usuarios`, `public.planes`, `public.contratos`).
    *   Uso de `UUID` para identificadores de usuario y `SERIAL` para IDs internos.
    *   Creación de un `TRIGGER` para calcular automáticamente la `fecha_expiracion` de los contratos.
    *   Creación de una `VIEW` (`vw_usuarios_planes`) para simplificar las consultas de usuarios y sus planes/contratos.
    *   Implementación de una función RPC (`create_user_and_contract`) para la creación atómica de usuarios y contratos.
    *   Configuración de `.env` para variables de entorno (Supabase URL, Keys, JWT_SECRET).

2.  **Backend (Node.js/Express):**
    *   **`backend/api/admin.js`:**
        *   Endpoint `POST /api/admin/create-temporary-user`: Crea usuarios temporales y sus contratos usando la función RPC.
        *   Endpoint `GET /api/admin/users`: Lista todos los usuarios y sus detalles usando la vista `vw_usuarios_planes`.
    *   **`backend/api/auth.js`:**
        *   Endpoint `POST /api/auth/login`: Maneja el inicio de sesión para usuarios temporales (devuelve `tempToken`) y permanentes (devuelve `sessionToken`).
        *   Endpoint `POST /api/auth/complete-registration`: Permite a los usuarios temporales establecer su contraseña permanente y activa su cuenta.
    *   **`backend/middleware/auth.js`:** Implementado middleware `protect` para verificar tokens JWT y proteger rutas.
    *   **`server.js`:** Configurado Express, rutas y aplicación del middleware `protect` a las rutas de administración.
    *   **`backend/services/supabase.js`:** Configuración de clientes `supabase` (público) y `supabaseAdmin` (con `service_role_key`).

3.  **Frontend (HTML/CSS/JavaScript):**
    *   **`public/login.html` y `public/js/login.js`:** Implementado el flujo de login, incluyendo la detección de usuarios temporales y el formulario para actualizar la contraseña. Manejo de tokens JWT.
    *   **`public/admin.html` y `public/js/admin.js`:** Implementado el panel de administración básico para crear y listar usuarios, con protección de acceso mediante JWT.
    *   **`public/styles.css`:** Estilos básicos para las interfaces.

4.  **Configuración y Herramientas:**
    *   `package.json` con dependencias (`express`, `bcryptjs`, `jsonwebtoken`, `@supabase/supabase-js`, `dotenv`).
    *   `.gitignore` configurado para ignorar archivos no deseados.
    *   Creación de usuario administrador 'Astaroth' en la base de datos para pruebas.
    *   Todo el código comprometido y subido a GitHub.

5.  **Mejoras de Estructura y Limpieza (Oct 2025):**
    *   Se eliminaron archivos y carpetas duplicadas/redundantes (`/templates` en la raíz, archivos `_backup`).
    *   Se creó la carpeta `/scripts` para centralizar los scripts de mantenimiento y configuración.
    *   Se reorganizaron los archivos de la raíz a la nueva carpeta `scripts`, limpiando la estructura del proyecto.

==========================================================
TAREAS PENDIENTES
==========================================================

1.  **Frontend - Dashboard de Usuario:**
    *   Implementar `public/dashboard.html` y `public/js/dashboard.js` (página a la que se redirige tras el login exitoso).

2.  **Mejoras en el Panel de Administración (Frontend y Backend):**
    *   **Frontend (`admin.js`):**
        *   **Contadores:** Mostrar número de cuentas temporales no actualizadas y cuentas oficiales.
        *   **Tabla de Usuarios:** Expandir la tabla para mostrar `Fecha Creación` y `Fin de Contrato`.
        *   **Mensaje Pre-hecho:** Generar y mostrar un mensaje listo para copiar/enviar al cliente tras crear un usuario temporal.
        *   **Nuevas Acciones por Usuario:**
            *   Botón `Suspender Cuenta` (15 días sin borrar datos).
            *   Botón `Renovar Contrato` (añadir 3 meses).
            *   Botón `Resetear Contraseña` (forzar al usuario a establecer una nueva).
        *   **Gráfica Histórica:** Mostrar un gráfico de registros de usuarios a lo largo del tiempo.
    *   **Backend (`admin.js` - Nuevos Endpoints):**
        *   `POST /api/admin/revoke-user`: Implementar la lógica para eliminar un usuario (ya está en el frontend, falta el backend).
        *   `POST /api/admin/suspend-user`: Nuevo endpoint para cambiar el estado del usuario a 'suspended'.
        *   `POST /api/admin/renew-contract`: Nuevo endpoint para actualizar la `fecha_expiracion` del contrato.
        *   `POST /api/admin/reset-password`: Nuevo endpoint para cambiar la contraseña de un usuario a una temporal y forzar la actualización.
        *   `GET /api/admin/registration-stats`: Nuevo endpoint para proporcionar datos para la gráfica histórica.

3.  **General:**
    *   Implementar la funcionalidad de "recordar usuario y contraseña" en el login.
    *   Implementar notificaciones opcionales al administrador (ej. cuando un usuario temporal expire).
    *   Refinar la interfaz de usuario (UI) y la experiencia de usuario (UX).
    *   Añadir manejo de errores más robusto y logging.
    *   Considerar la implementación de roles de usuario más granulares (ej. `admin`, `editor`, `viewer`) si es necesario.
    *   Escribir tests unitarios/de integración.