-- Crear la tabla de pedidos
CREATE TABLE public.pedidos (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    store_id BIGINT REFERENCES public.stores(id) ON DELETE SET NULL,
    user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    customer_info JSONB, -- Para guardar nombre, teléfono, etc. del cliente
    order_content JSONB, -- Para guardar los productos y detalles del carrito
    total_amount NUMERIC(10, 2) NOT NULL,
    payment_status TEXT DEFAULT 'pendiente' NOT NULL,
    delivery_status TEXT DEFAULT 'pendiente' NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),

    CONSTRAINT chk_payment_status CHECK (payment_status IN ('pendiente', 'parcial', 'pagado')),
    CONSTRAINT chk_delivery_status CHECK (delivery_status IN ('pendiente', 'en_proceso', 'en_camino', 'entregado', 'cancelado'))
);

-- Crear la tabla de abonos (pagos)
CREATE TABLE public.abonos (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pedido_id BIGINT REFERENCES public.pedidos(id) ON DELETE CASCADE,
    amount NUMERIC(10, 2) NOT NULL,
    payment_method TEXT,
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Comentarios para el equipo
COMMENT ON TABLE public.pedidos IS 'Tabla para almacenar las órdenes de los clientes.';
COMMENT ON TABLE public.abonos IS 'Tabla para registrar los pagos o abonos realizados a un pedido.';

-- Trigger para actualizar el campo updated_at en la tabla de pedidos
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_pedido_update
BEFORE UPDATE ON public.pedidos
FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();
